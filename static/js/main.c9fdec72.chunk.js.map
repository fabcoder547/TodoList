{"version":3,"sources":["Context/TodoContext.js","Context/reducer.js","Context/action.types.js","Components/FormTodo.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoContext","createContext","todoReducer","todos","action","type","payload","filter","todo","id","FormTodo","useContext","dispatch","useState","isInput","setIsInput","onSubmit","e","preventDefault","alert","length","v4","todoData","console","log","name","value","onChange","target","className","Todos","map","key","onClick","style","float","textTransform","App","useReducer","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qNAEaA,G,MAAcC,2B,OCAdC,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,ICJoB,WDKlB,MAAM,GAAN,mBAAWF,GAAX,CAAkBC,EAAOE,UAG3B,ICPuB,cDQrB,OAAOH,EAAMI,QAAO,SAACC,GACnB,OAAOA,EAAKC,KAAOL,EAAOE,WAI9B,QACE,OAAOH,I,QEgFEO,EAhDE,WAAO,IAAD,EACKC,qBAAWX,GADhB,mBACdG,EADc,KACPS,EADO,OA2BSC,mBAAS,IA3BlB,mBA2BdC,EA3Bc,KA2BLC,EA3BK,KA4BrB,OACE,iCACE,0BAAMC,SA3BW,SAACC,GAEpB,GADAA,EAAEC,iBACc,KAAZJ,EACF,OAAOK,MAAM,+BAEf,GAAIhB,EAAMiB,OAAS,EAAG,CACpB,IAAMZ,EAAO,CACXC,GAAIY,cACJC,SAAUR,GAGZF,EAAS,CACPP,KD9DgB,WC+DhBC,QAASE,IAEXe,QAAQC,IAAIrB,GACZoB,QAAQC,IAAIZ,QAEZO,MAAM,wBAGRJ,EAAW,MAOP,2BACEV,KAAK,OACLoB,KAAK,OACLC,MAAOZ,EACPa,SAAU,SAACV,GACTF,EAAWE,EAAEW,OAAOF,UAIxB,4BAAQrB,KAAK,SAASwB,UAAU,mBAAhC,UCvBOC,EA/BD,WAAO,IAAD,EACQnB,qBAAWX,GADnB,mBACXG,EADW,KACJS,EADI,KAGlB,OADAW,QAAQC,IAAIrB,GAEV,4BACGA,EAAM4B,KAAI,SAACvB,GACV,OACE,wBAAIwB,IAAKxB,EAAKC,IACXD,EAAKc,SACN,0BACEW,QAAS,WACPrB,EAAS,CACPP,KF5CS,cE6CTC,QAASE,EAAKC,MAGlBoB,UAAU,cACVK,MAAO,CACLC,MAAO,QACPC,cAAe,cAVnB,aCRGC,EAdH,WAAO,IAAD,EACUC,qBAAWpC,EAAa,IADlC,mBACTC,EADS,KACFS,EADE,KAGhB,OACE,yBAAKiB,UAAU,aACb,kBAAC7B,EAAYuC,SAAb,CAAsBb,MAAO,CAACvB,EAAOS,IACnC,qCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SChBY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.c9fdec72.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const TodoContext = createContext();\r\n","import { ADD_TODO, REMOVE_TODO } from \"./action.types\";\r\n\r\nexport const todoReducer = (todos, action) => {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      return [...todos, action.payload];\r\n    }\r\n\r\n    case REMOVE_TODO: {\r\n      return todos.filter((todo) => {\r\n        return todo.id !== action.payload;\r\n      });\r\n    }\r\n\r\n    default: {\r\n      return todos;\r\n    }\r\n  }\r\n};\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const REMOVE_TODO = \"REMOVE_TODO\";\r\n","import React, { useState, useContext } from \"react\";\r\nimport { v4 } from \"uuid\";\r\nimport { TodoContext } from \"../Context/TodoContext\";\r\n// import { v4 } from \"uuid\";\r\nimport { ADD_TODO } from \"../Context/action.types\";\r\n// const FormTodo = () => {\r\n//   const [todoString, setTodoString] = useState(\"\");\r\n\r\n//   const handelSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (todoString === \"\") {\r\n//       return alert(\"please Enter a todo\");\r\n//     }\r\n//     const todo = {\r\n//       id: v4(),\r\n//       todoString,\r\n//     };\r\n\r\n//     dispatch({\r\n//       type: ADD_TODO,\r\n//       payload: todo,\r\n//     });\r\n\r\n//     setTodoString(\"\");\r\n//   };\r\n\r\n//   return (\r\n//     <section>\r\n//       <form onSubmit={handelSubmit}>\r\n//         {/* TODO:Add onchange method */}\r\n//         <input\r\n//           type=\"text\"\r\n//           name=\"todo\"\r\n//           id=\"todo\"\r\n//           value={todoString}\r\n//           onChange={(e) => {\r\n//             setTodoString(e.target.value);\r\n//           }}\r\n//         />\r\n//         <button type=\"submit\" className=\"btn-success\">\r\n//           ADD\r\n//         </button>\r\n//       </form>\r\n//     </section>\r\n//   );\r\n// };\r\n\r\nconst FormTodo = () => {\r\n  const [todos, dispatch] = useContext(TodoContext);\r\n\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (isInput === \"\") {\r\n      return alert(\"hey u cannot set empty TODO\");\r\n    }\r\n    if (todos.length < 5) {\r\n      const todo = {\r\n        id: v4(),\r\n        todoData: isInput,\r\n      };\r\n\r\n      dispatch({\r\n        type: ADD_TODO,\r\n        payload: todo,\r\n      });\r\n      console.log(todos);\r\n      console.log(dispatch);\r\n    } else {\r\n      alert(\"Array is more than 5\");\r\n    }\r\n\r\n    setIsInput(\"\");\r\n  };\r\n\r\n  const [isInput, setIsInput] = useState(\"\");\r\n  return (\r\n    <section>\r\n      <form onSubmit={handelSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"todo\"\r\n          value={isInput}\r\n          onChange={(e) => {\r\n            setIsInput(e.target.value);\r\n          }}\r\n        />\r\n\r\n        <button type=\"submit\" className=\"btn btn-success\">\r\n          ADD\r\n        </button>\r\n      </form>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default FormTodo;\r\n","import React, { useContext } from \"react\";\r\nimport { TodoContext } from \"../Context/TodoContext\";\r\nimport { REMOVE_TODO } from \"../Context/action.types\";\r\n\r\n// import { TodoContext } from \"../Context/TodoContext\";\r\n// import { REMOVE_TODO } from \"../Context/action.types\";\r\n\r\n// const Todos = () => {\r\n//   const { todos, dispatch } = useContext(TodoContext);\r\n//   return (\r\n//     <ul>\r\n//       {todos.map((todo) => {\r\n//         return (\r\n//           <li key={todo.id}>\r\n//             {todo.todoString}\r\n//             <span\r\n//               className=\"text-danger\"\r\n//               onClick={() => {\r\n//                 dispatch({\r\n//                   type: REMOVE_TODO,\r\n//                   payload: todo.id,\r\n//                 });\r\n//                }}\r\n//             >\r\n//               delete\r\n//             </span>\r\n//           </li>\r\n//         );\r\n//       })}\r\n//     </ul>\r\n//   );\r\n// };\r\n\r\nconst Todos = () => {\r\n  const [todos, dispatch] = useContext(TodoContext);\r\n  console.log(todos);\r\n  return (\r\n    <ul>\r\n      {todos.map((todo) => {\r\n        return (\r\n          <li key={todo.id}>\r\n            {todo.todoData}\r\n            <span\r\n              onClick={() => {\r\n                dispatch({\r\n                  type: REMOVE_TODO,\r\n                  payload: todo.id,\r\n                });\r\n              }}\r\n              className=\"text-danger\"\r\n              style={{\r\n                float: \"right\",\r\n                textTransform: \"uppercase\",\r\n              }}\r\n            >\r\n              del\r\n            </span>\r\n          </li>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Todos;\r\n","import React, { useReducer } from \"react\";\nimport \"./App.css\";\nimport { TodoContext } from \"./Context/TodoContext\";\nimport { todoReducer } from \"./Context/reducer\";\nimport FormTodo from \"./Components/FormTodo\";\nimport Todos from \"./Components/Todos\";\n// const App = () => {\n//   const [todos, dispatch] = useReducer(todoReducer, []);\n\n//   return (\n//     <TodoContext.Provider value={{ todos, dispatch }}>\n//       <div className=\"container\">\n//         <h1>Todo App With Context API</h1>\n//         <Todos />\n//         <FormTodo />\n//       </div>\n//     </TodoContext.Provider>\n//   );\n// };\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, []);\n\n  return (\n    <div className=\"container\">\n      <TodoContext.Provider value={[todos, dispatch]}>\n        <h1>hello</h1>\n        <Todos />\n        <FormTodo />\n      </TodoContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}